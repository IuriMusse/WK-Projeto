unit UPrincipal;
interface
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.Buttons, Vcl.StdCtrls,
  System.ImageList, Vcl.ImgList, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.Samples.Spin, Datasnap.DBClient, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,  Datasnap.Provider, Vcl.Imaging.pngimage, UPedido, UItemPedido;
type
  TfrmPrincipal = class(TForm)
    Shape1: TShape;
    btnIniciarVenda: TSpeedButton;
    btnFinalizarVenda: TSpeedButton;
    btnCancelarVenda: TSpeedButton;
    lblCodCliente: TLabel;
    lblNomeCliente: TLabel;
    shpCupom: TShape;
    Shape6: TShape;
    lblCodProduto: TLabel;
    shpDescricaoProduto: TShape;
    lblQuantidade: TLabel;
    lblPrecoTotal: TLabel;
    lblPrecoUnitario: TLabel;
    btnAdicionarProduto: TSpeedButton;
    lblCupom: TLabel;
    lblProduto: TLabel;
    shpTotalVendas: TShape;
    lblTotalPedido: TLabel;
    edtCodCliente: TEdit;
    edtNomeCliente: TEdit;
    edtCodProduto: TEdit;
    spnQuantidade: TSpinEdit;
    edtPrecoTotalItem: TEdit;
    cdsitensVendas: TClientDataSet;
    cdsitensVendascod: TIntegerField;
    cdsitensVendasdescricao: TStringField;
    cdsitensVendasvl_item: TCurrencyField;
    cdsitensVendasTotal_Item: TCurrencyField;
    cdsitensVendasvl_unitario: TCurrencyField;
    cdsitensVendasTotal: TAggregateField;
    dsItensVendas: TDataSource;
    grdVendas: TDBGrid;
    qryProdutos: TFDQuery;
    qryProdutosCODIGO: TFDAutoIncField;
    qryProdutosDESCRICAO: TStringField;
    qryProdutosPRECO_VENDA: TBCDField;
    edtPrecoUnitario: TEdit;
    qryClientes: TFDQuery;
    qryClientesCODIGO: TFDAutoIncField;
    qryClientesNOME: TStringField;
    qryClientesCIDADE: TStringField;
    qryClientesUF: TStringField;
    qryConcluirPedido: TFDQuery;
    qryItemVenda: TFDQuery;
    cdsitensVendasqtd: TIntegerField;
    qryPedido: TFDQuery;
    lblNumPedido: TLabel;
    lblPedido: TLabel;
    qryPedidoCOUNT: TLargeintField;
    lblTotalVendas: TLabel;
    imgProduto: TImage;
    lblInstrucao: TLabel;
    lblInicio: TLabel;
    lblStatusCaixa: TLabel;
    procedure edtCodProdutoChange(Sender: TObject);
    procedure btnAdicionarProdutoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure spnQuantidadeChange(Sender: TObject);
    procedure edtCodClienteChange(Sender: TObject);
    procedure btnFinalizarVendaClick(Sender: TObject);
    procedure btnIniciarVendaClick(Sender: TObject);
    procedure btnCancelarVendaClick(Sender: TObject);
    procedure grdVendasKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure grdVendasColEnter(Sender: TObject);
    procedure grdVendasKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    { Private declarations }
    procedure DesabilitaCampos;
    procedure HabilitaCampos;
    procedure LimpaCampos;
    procedure SetaCamposDBGrid;
    procedure AtualizaTotalItem;
    procedure limpaDataSetPedido;
    procedure GeraCodigoPedido;
    function ValidaCampos: Boolean;
    function IncluiItemVenda(ItemPedido : TItemPedido): Boolean;
  public
    { Public declarations }
  end;
var
  frmPrincipal: TfrmPrincipal;
  Pedido : TPedido;
implementation
uses
  UDm;
{$R *.dfm}
procedure TfrmPrincipal.btnFinalizarVendaClick(Sender: TObject);
var
  item:   TItemPedido;
begin
   if(grdVendas.DataSource.DataSet.RecordCount <> 0) then
   begin
      with qryConcluirPedido do
      begin
        Close;
        ParamByName('1').Value := Pedido.NUM_PEDIDO;
        ParamByName('2').Value := edtCodCliente.Text;
        ParamByName('3').Value := cdsitensVendasTotal.Value;
        ExecSQL;
        cdsitensVendas.First;
        while not cdsitensVendas.Eof do
        begin
          item := TItemPedido.Create;
          item.NUM_PEDIDO := Pedido.NUM_PEDIDO;
          item.CODIGO_PRODUTO := cdsitensVendascod.Value;
          item.QUANTIDADE := cdsitensVendasqtd.Value;
          item.VLR_UNITARIO := cdsitensVendasvl_item.Value;
          item.VLR_TOTAL := cdsitensVendasTotal_Item.Value;
          IncluiItemVenda(item);
          cdsitensVendas.Next;
          FreeAndNil(item);
        end;
      end;
      limpaDataSetPedido;
      DesabilitaCampos;
      lblStatusCaixa.Caption := 'CAIXA LIVRE';
      lblStatusCaixa.Font.Color := $0000DD00;
      lblPedido.Caption := '00000';
      edtCodCliente.Text := '';
      edtNomeCliente.Text := '';
      LimpaCampos;
      Application.MessageBox('Pedido realizado com sucesso!', 'Informação', mb_ok + MB_ICONINFORMATION);
   end else
   begin
     Application.MessageBox('Sem pedido para processar!','Teste', MB_OK+MB_ICONERROR);
   end;
   FreeAndNil(Pedido);
   LimpaCampos;
   lblTotalPedido.Caption := '0.00';
end;
function TfrmPrincipal.IncluiItemVenda(ItemPedido : TItemPedido): Boolean;
begin
  try
    with qryItemVenda do
    begin
      Close;
      ParamByName('1').Value := ItemPedido.NUM_PEDIDO;
      ParamByName('2').Value := ItemPedido.CODIGO_PRODUTO;
      ParamByName('3').Value := ItemPedido.QUANTIDADE;
      ParamByName('4').Value := ItemPedido.VLR_UNITARIO;
      ParamByName('5').Value := ItemPedido.VLR_TOTAL;
      ExecSQL;
    end;
    Result := true;
  except
    on e: exception do
    begin
      Result := false;
    end;
  end;
end;
procedure TfrmPrincipal.btnIniciarVendaClick(Sender: TObject);
begin
  lblStatusCaixa.Caption := 'OCUPADO';
  lblStatusCaixa.font.Color := $004949FC;
  dsItensVendas.DataSet.Open;
  btnIniciarVenda.Enabled := False;
  HabilitaCampos;
  FreeAndNil(Pedido);
  GeraCodigoPedido;
end;
procedure TfrmPrincipal.btnAdicionarProdutoClick(Sender: TObject);
begin
  try
      if (ValidaCampos = True) then
      begin
        cdsitensVendas.Append;
        cdsitensVendascod.Value := qryProdutosCODIGO.Value;
        cdsitensVendasdescricao.Value := qryProdutosDESCRICAO.Value;
        cdsitensVendasqtd.Value := spnQuantidade.Value;
        cdsitensVendasvl_item.Value := qryProdutosPRECO_VENDA.Value;
        cdsitensVendasTotal_Item.Value := qryProdutosPRECO_VENDA.Value *  spnQuantidade.Value;
        cdsitensVendas.Post;
        lblTotalPedido.Caption := formatfloat( '##,###,##0.00', cdsitensVendasTotal.Value);
        edtCodProduto.SetFocus;
      end else
      begin
         Application.MessageBox('Preencha os dados do produto!','Campos inválidos', MB_OK+MB_ICONERROR);
      end;
  finally
     LimpaCampos;
     imgProduto.Visible := false;
  end;

end;
procedure TfrmPrincipal.btnCancelarVendaClick(Sender: TObject);
begin
  if MessageDlg('Deseja cancelar a venda?',mtConfirmation,[mbYes,mbNo],0)=mrYes
   then begin
      FreeAndNil(Pedido);
      limpaDataSetPedido;
      btnFinalizarVenda.Enabled := False;
      lblStatusCaixa.Caption := 'CAIXA LIVRE';
      lblStatusCaixa.font.Color := $0000DD00;
      DesabilitaCampos;
      lblPedido.Caption := '00000';
      edtCodCliente.Text := '';
      edtNomeCliente.Text := '';
      LimpaCampos;
   end;
end;
procedure TfrmPrincipal.edtCodClienteChange(Sender: TObject);
begin
  if edtCodCliente.Text <> '' then
  begin
    try
      with qryClientes do
      begin
        Close;
        ParamByName('cod').Value := edtCodCliente.Text;
        Open;
        FetchAll;
      end;

      if qryClientes.RecordCount > 0 then
      begin
        edtNomeCliente.Text := qryClientesNOME.Value;
      end
      else
      begin
        edtNomeCliente.Text := 'CLIENTE NÃO CADASTRADO...';
      end;

    except
      on E: Exception do
      begin
        Application.MessageBox(PChar('Erro ao buscar cliente: ' + E.Message), 'Erro', MB_OK + MB_ICONERROR);
        edtNomeCliente.Text := '';
      end;
    end;
  end
  else
  begin
    LimpaCampos;
  end;
end;

procedure TfrmPrincipal.edtCodProdutoChange(Sender: TObject);
begin
    if(edtCodProduto.Text <> '') then
    begin
        with qryProdutos do
        begin
            Close;
            ParamByName('cod').Value := edtCodProduto.Text;
            Open;
            FetchAll;
        end;
        if (qryProdutos.RecordCount > 0) then
        begin
            spnQuantidade.Value := 0;
            lblProduto.Caption := qryProdutosDESCRICAO.AsString;
            imgProduto.Visible := True;
            edtPrecoUnitario.Text := formatfloat( '##,###,##0.00', qryProdutosPRECO_VENDA.AsString.ToDouble);
            AtualizaTotalItem;
        end
        else
        begin
            LimpaCampos;
            lblProduto.Caption := 'PRODUTO NÃO ENCONTRADO...'
        end;
    end
    else
    begin
        LimpaCampos;
    end;
end;
procedure TfrmPrincipal.FormCreate(Sender: TObject);
begin
  cdsitensVendas.CreateDataSet;
  DesabilitaCampos;
  lblInicio.Caption := Format('Hoje é %s e são %s', [DateToStr(Date), TimeToStr(Time)]);
end;

procedure TfrmPrincipal.GeraCodigoPedido;
begin
  try
    Pedido := TPedido.Create;
    with qryPedido do
    begin
      Close;
      Open;
      FetchAll;

      if qryPedidoCOUNT.IsNull then
        Pedido.NUM_PEDIDO := 1
      else
        Pedido.NUM_PEDIDO := qryPedidoCOUNT.Value + 1;

      lblPedido.Caption := Format('%5.5d', [Pedido.NUM_PEDIDO]);
    end;
  except
    on E: Exception do
    begin
      Application.MessageBox(PChar('Erro ao gerar código do pedido: ' + E.Message), 'Erro', MB_OK + MB_ICONERROR);
      FreeAndNil(Pedido);
    end;
  end;
end;

procedure TfrmPrincipal.grdVendasColEnter(Sender: TObject);
begin
  SetaCamposDBGrid;
end;

procedure TfrmPrincipal.grdVendasKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
  begin
  if (Key = VK_DELETE) and (cdsitensVendas.RecordCount > 0) then
  begin
    if cdsitensVendas.State in [dsBrowse] then
    begin
      if MessageDlg('Deseja realmente excluir o item selecionado?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        try
          cdsitensVendas.Delete;
          if cdsitensVendas.RecordCount <> 0 then
            lblTotalPedido.Caption := FormatFloat('##,###,##0.00', cdsitensVendasTotal.Value)
          else
            lblTotalPedido.Caption := '0.00';
        except
          on E: Exception do
            Application.MessageBox(PChar('Erro ao excluir item: ' + E.Message), 'Erro', MB_OK + MB_ICONERROR);
        end;
        LimpaCampos;
      end;
    end;
  end;
end;

procedure TfrmPrincipal.grdVendasKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetaCamposDBGrid;
end;

procedure TfrmPrincipal.HabilitaCampos;
begin
  edtCodCliente.Enabled := True;
  edtNomeCliente.Enabled := True;
  edtCodProduto.Enabled := True;
  edtPrecoUnitario.Enabled := True;
  edtPrecoTotalItem.Enabled := True;
  spnQuantidade.Enabled := True;
  btnAdicionarProduto.Enabled := True;
  btnCancelarVenda.Enabled := True;
  btnFinalizarVenda.Enabled := True;
  btnIniciarVenda.Enabled := False;
end;
procedure TfrmPrincipal.DesabilitaCampos;
begin
  LimpaCampos;
  edtCodProduto.Enabled := False;
  edtCodCliente.Enabled := False;
  edtNomeCliente.Enabled := False;
  edtPrecoUnitario.Enabled := False;
  edtPrecoTotalItem.Enabled := False;
  spnQuantidade.Enabled := False;
  btnAdicionarProduto.Enabled := False;
  btnFinalizarVenda.Enabled := False;
  btnCancelarVenda.Enabled := False;
  btnIniciarVenda.Enabled := True;
end;
procedure TfrmPrincipal.spnQuantidadeChange(Sender: TObject);
begin
  AtualizaTotalItem;
end;
function TfrmPrincipal.ValidaCampos: Boolean;
begin
    if(edtCodProduto.Text = '')
      or (edtCodProduto.GetTextLen < 1)
        or (spnQuantidade.Value = 0)
          or (edtPrecoUnitario.Text = '') then
    begin
      Result := False;
    end else
    begin
      Result := True;
    end;
end;
procedure TfrmPrincipal.LimpaCampos;
begin
  spnQuantidade.Value := 0;
  edtCodProduto.Text := '';
  edtPrecoUnitario.Clear;
  edtPrecoTotalItem.Clear;
end;
procedure TfrmPrincipal.limpaDataSetPedido;
begin
    with cdsitensVendas do
    begin
      Open;
      EmptyDataSet;
      Close;
    end;
    cdsitensVendas.Open;
end;
procedure TfrmPrincipal.SetaCamposDBGrid;
begin
   edtCodProduto.Text := cdsitensVendascod.AsString;
   spnQuantidade.Value := cdsitensVendasqtd.Value;
   AtualizaTotalItem;
end;
procedure TfrmPrincipal.AtualizaTotalItem;
begin
  if((spnQuantidade.Value > 0) and (edtPrecoUnitario.Text <> '')) then
  begin
     edtPrecoTotalItem.Text := formatfloat( '##,###,##0.00', qryProdutosPRECO_VENDA.Value * spnQuantidade.Value);
  end;
end;

end.
